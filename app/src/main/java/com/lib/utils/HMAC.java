package com.lib.utils;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.transform.TransformerException;


public class HMAC {
    private static final String HMAC_MD5_NAME = "HmacMD5";
    private static final String DEFAULT_KEY = "ultrasonic";

    private static String key = DEFAULT_KEY;

//    public static void main(String[] args) throws TransformerException {
//
//        byte a[] = {0x5, 0x3, 0x7, 0x4, 0x7, 0x2, 0x6, 0x8, 0x7, 0x4, 0x7, 0x4, 0x7, 0x0, 0x7, 0x3, 0x3, 0xA, 0x2, 0xF, 0x2, 0xF, 0x6, 0x5, 0x6, 0xE, 0x2, 0xE, 0x7, 0x7, 0x6, 0x9, 0x6, 0xB, 0x6, 0x9, 0x7, 0x0, 0x6, 0x5, 0x6, 0x4, 0x6, 0x9, 0x6, 0x1, 0x2, 0xE, 0x6, 0xF, 0x7, 0x2, 0x6, 0x7, 0x2, 0xF, 0x7, 0x7, 0x6, 0x9, 0x6, 0xB, 0x6, 0x9, 0x2, 0xF, 0x5, 0x4, 0x6, 0x5, 0x7, 0x8, 0x7, 0x4, 0x5, 0xF, 0x6, 0x6, 0x6, 0x9, 0x6, 0xC, 0x6, 0x5, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0x0, 0, 0xF};
//        byte[] b = {0x53, 0x74, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x65, 0x6E, 0x2E, 0x77, 0x69, 0x6B, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x77, 0x69, 0x6B, 0x69, 0x2F, 0x54, 0x65, 0x78, 0x74, 0x5F, 0x66, 0x69, 0x6C, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF};
//        b = encode(a);
//        System.out.println(b);
//    }

    public static void setKey(String key) {
        HMAC.key = key;
    }

    public static byte[] encode(byte[] data) throws TransformerException {
        SecretKeySpec sk = new SecretKeySpec(key.getBytes(), HMAC_MD5_NAME);
        Mac mac;
        try {
            mac = Mac.getInstance(HMAC_MD5_NAME);
            mac.init(sk);
            byte[] result = mac.doFinal(data);
            return result;
        } catch (NoSuchAlgorithmException e) {
            throw new TransformerException(e);
        } catch (InvalidKeyException e) {
            throw new TransformerException(e);
        }
    }

    public static byte[] encode(byte[] data, int length) throws TransformerException {
        byte[] temp = new byte[length];
        for (int i = 0; i < length; i++)
            temp[i] = data[i];
        return encode(temp);
    }
}
